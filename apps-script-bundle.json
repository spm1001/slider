{
  "files": [
    {
      "name": "config",
      "type": "server_js",
      "source": "function getDefaultConfig() {\n  return {\n    fontMappings: {\n      'Comic Sans MS': 'Arial',\n      'Arial': 'Comic Sans MS'\n    },\n    processNotes: true,\n    skipErrors: true,\n    batchSize: 50,\n    apiRetries: 3,\n    apiRetryDelay: 1000\n  };\n}\n\nfunction parseYamlConfig(yamlString) {\n  try {\n    const config = parseSimpleYaml(yamlString);\n    validateConfig(config);\n    return config;\n  } catch (error) {\n    throw new Error('Invalid YAML configuration: ' + error.message);\n  }\n}\n\nfunction parseSimpleYaml(yamlString) {\n  const lines = yamlString.split('\\n');\n  const config = {\n    fontMappings: {},\n    processNotes: true,\n    skipErrors: true,\n    batchSize: 50,\n    apiRetries: 3,\n    apiRetryDelay: 1000\n  };\n  \n  let currentSection = null;\n  let inFontMappings = false;\n  \n  for (let line of lines) {\n    line = line.trim();\n    \n    if (line.startsWith('#') || line === '') {\n      continue;\n    }\n    \n    if (line === 'fontMappings:') {\n      inFontMappings = true;\n      continue;\n    }\n    \n    if (line.match(/^[a-zA-Z]/)) {\n      inFontMappings = false;\n    }\n    \n    if (inFontMappings && line.startsWith('-')) {\n      const mapping = line.substring(1).trim();\n      const parts = mapping.split(':');\n      if (parts.length === 2) {\n        const from = parts[0].trim().replace(/['\"]/g, '');\n        const to = parts[1].trim().replace(/['\"]/g, '');\n        config.fontMappings[from] = to;\n      }\n    } else {\n      const colonIndex = line.indexOf(':');\n      if (colonIndex > 0) {\n        const key = line.substring(0, colonIndex).trim();\n        const value = line.substring(colonIndex + 1).trim();\n        \n        switch (key) {\n          case 'processNotes':\n            config.processNotes = value === 'true';\n            break;\n          case 'skipErrors':\n            config.skipErrors = value === 'true';\n            break;\n          case 'batchSize':\n            config.batchSize = parseInt(value) || 50;\n            break;\n          case 'apiRetries':\n            config.apiRetries = parseInt(value) || 3;\n            break;\n          case 'apiRetryDelay':\n            config.apiRetryDelay = parseInt(value) || 1000;\n            break;\n        }\n      }\n    }\n  }\n  \n  return config;\n}\n\nfunction validateConfig(config) {\n  if (!config) {\n    throw new Error('Configuration is null or undefined');\n  }\n  \n  if (!config.fontMappings || typeof config.fontMappings !== 'object') {\n    throw new Error('fontMappings must be an object');\n  }\n  \n  if (Object.keys(config.fontMappings).length === 0) {\n    throw new Error('fontMappings cannot be empty');\n  }\n  \n  if (typeof config.processNotes !== 'boolean') {\n    throw new Error('processNotes must be a boolean');\n  }\n  \n  if (typeof config.skipErrors !== 'boolean') {\n    throw new Error('skipErrors must be a boolean');\n  }\n  \n  if (!Number.isInteger(config.batchSize) || config.batchSize < 1 || config.batchSize > 100) {\n    throw new Error('batchSize must be an integer between 1 and 100');\n  }\n  \n  if (!Number.isInteger(config.apiRetries) || config.apiRetries < 1 || config.apiRetries > 10) {\n    throw new Error('apiRetries must be an integer between 1 and 10');\n  }\n  \n  if (!Number.isInteger(config.apiRetryDelay) || config.apiRetryDelay < 100) {\n    throw new Error('apiRetryDelay must be an integer >= 100 milliseconds');\n  }\n  \n  return true;\n}\n\nfunction getConfigFromSheet() {\n  try {\n    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config');\n    if (!sheet) {\n      return getDefaultConfig();\n    }\n    \n    const yamlRange = sheet.getRange('B1');\n    const yamlString = yamlRange.getValue();\n    \n    if (!yamlString || yamlString.trim() === '') {\n      return getDefaultConfig();\n    }\n    \n    return parseYamlConfig(yamlString);\n  } catch (error) {\n    Logger.log('Error loading config from sheet: ' + error.toString());\n    return getDefaultConfig();\n  }\n}\n\nfunction saveConfigToSheet(config) {\n  try {\n    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Config') || \n                  SpreadsheetApp.getActiveSpreadsheet().insertSheet('Config');\n    \n    const yamlString = configToYaml(config);\n    sheet.getRange('A1').setValue('Configuration (YAML):');\n    sheet.getRange('B1').setValue(yamlString);\n    \n    return true;\n  } catch (error) {\n    Logger.log('Error saving config to sheet: ' + error.toString());\n    return false;\n  }\n}\n\nfunction configToYaml(config) {\n  let yaml = '';\n  yaml += 'fontMappings:\\n';\n  \n  for (const [from, to] of Object.entries(config.fontMappings)) {\n    yaml += `  - \"${from}\": \"${to}\"\\n`;\n  }\n  \n  yaml += `\\nprocessNotes: ${config.processNotes}\\n`;\n  yaml += `skipErrors: ${config.skipErrors}\\n`;\n  yaml += `batchSize: ${config.batchSize}\\n`;\n  yaml += `apiRetries: ${config.apiRetries}\\n`;\n  yaml += `apiRetryDelay: ${config.apiRetryDelay}\\n`;\n  \n  return yaml;\n}"
    },
    {
      "name": "constants",
      "type": "server_js",
      "source": "const OAUTH_SCOPES = [\n  'https://www.googleapis.com/auth/presentations',\n  'https://www.googleapis.com/auth/drive.readonly',\n  'https://www.googleapis.com/auth/spreadsheets'\n];\n\nconst API_ENDPOINTS = {\n  PRESENTATIONS_GET: 'https://slides.googleapis.com/v1/presentations/{presentationId}',\n  PRESENTATIONS_BATCH_UPDATE: 'https://slides.googleapis.com/v1/presentations/{presentationId}:batchUpdate',\n  PRESENTATIONS_PAGES_GET: 'https://slides.googleapis.com/v1/presentations/{presentationId}/pages/{pageId}'\n};\n\nconst ELEMENT_TYPES = {\n  SHAPE: 'shape',\n  TABLE: 'table',\n  IMAGE: 'image',\n  VIDEO: 'video',\n  LINE: 'line',\n  WORD_ART: 'wordArt',\n  SHEETS_CHART: 'sheetsChart',\n  UNKNOWN: 'unknown'\n};\n\nconst SHAPE_TYPES = {\n  TEXT_BOX: 'TEXT_BOX',\n  RECTANGLE: 'RECTANGLE',\n  ROUND_RECTANGLE: 'ROUND_RECTANGLE',\n  ELLIPSE: 'ELLIPSE',\n  ARC: 'ARC',\n  BENT_ARROW: 'BENT_ARROW',\n  BENT_UP_ARROW: 'BENT_UP_ARROW',\n  BEVEL: 'BEVEL',\n  BLOCK_ARC: 'BLOCK_ARC',\n  BRACE_PAIR: 'BRACE_PAIR',\n  BRACKET_PAIR: 'BRACKET_PAIR',\n  CAN: 'CAN',\n  CHEVRON: 'CHEVRON',\n  CHORD: 'CHORD',\n  CLOUD: 'CLOUD',\n  CORNER: 'CORNER',\n  CUBE: 'CUBE',\n  CURVED_DOWN_ARROW: 'CURVED_DOWN_ARROW',\n  CURVED_LEFT_ARROW: 'CURVED_LEFT_ARROW',\n  CURVED_RIGHT_ARROW: 'CURVED_RIGHT_ARROW',\n  CURVED_UP_ARROW: 'CURVED_UP_ARROW',\n  DECAGON: 'DECAGON',\n  DIAGONAL_STRIPE: 'DIAGONAL_STRIPE',\n  DIAMOND: 'DIAMOND',\n  DODECAGON: 'DODECAGON',\n  DONUT: 'DONUT',\n  DOUBLE_WAVE: 'DOUBLE_WAVE',\n  DOWN_ARROW: 'DOWN_ARROW',\n  DOWN_ARROW_CALLOUT: 'DOWN_ARROW_CALLOUT',\n  FOLDED_CORNER: 'FOLDED_CORNER',\n  FRAME: 'FRAME',\n  HALF_FRAME: 'HALF_FRAME',\n  HEART: 'HEART',\n  HEPTAGON: 'HEPTAGON',\n  HEXAGON: 'HEXAGON',\n  HOME_PLATE: 'HOME_PLATE',\n  HORIZONTAL_SCROLL: 'HORIZONTAL_SCROLL',\n  IRREGULAR_SEAL_1: 'IRREGULAR_SEAL_1',\n  IRREGULAR_SEAL_2: 'IRREGULAR_SEAL_2',\n  LEFT_ARROW: 'LEFT_ARROW',\n  LEFT_ARROW_CALLOUT: 'LEFT_ARROW_CALLOUT',\n  LEFT_BRACE: 'LEFT_BRACE',\n  LEFT_BRACKET: 'LEFT_BRACKET',\n  LEFT_RIGHT_ARROW: 'LEFT_RIGHT_ARROW',\n  LEFT_RIGHT_ARROW_CALLOUT: 'LEFT_RIGHT_ARROW_CALLOUT',\n  LEFT_RIGHT_UP_ARROW: 'LEFT_RIGHT_UP_ARROW',\n  LEFT_UP_ARROW: 'LEFT_UP_ARROW',\n  LIGHTNING_BOLT: 'LIGHTNING_BOLT',\n  MATH_DIVIDE: 'MATH_DIVIDE',\n  MATH_EQUAL: 'MATH_EQUAL',\n  MATH_MINUS: 'MATH_MINUS',\n  MATH_MULTIPLY: 'MATH_MULTIPLY',\n  MATH_NOT_EQUAL: 'MATH_NOT_EQUAL',\n  MATH_PLUS: 'MATH_PLUS',\n  MOON: 'MOON',\n  NO_SMOKING: 'NO_SMOKING',\n  NOTCHED_RIGHT_ARROW: 'NOTCHED_RIGHT_ARROW',\n  OCTAGON: 'OCTAGON',\n  PARALLELOGRAM: 'PARALLELOGRAM',\n  PENTAGON: 'PENTAGON',\n  PIE: 'PIE',\n  PLAQUE: 'PLAQUE',\n  PLUS: 'PLUS',\n  QUAD_ARROW: 'QUAD_ARROW',\n  QUAD_ARROW_CALLOUT: 'QUAD_ARROW_CALLOUT',\n  RIBBON: 'RIBBON',\n  RIBBON_2: 'RIBBON_2',\n  RIGHT_ARROW: 'RIGHT_ARROW',\n  RIGHT_ARROW_CALLOUT: 'RIGHT_ARROW_CALLOUT',\n  RIGHT_BRACE: 'RIGHT_BRACE',\n  RIGHT_BRACKET: 'RIGHT_BRACKET',\n  ROUND_1_RECTANGLE: 'ROUND_1_RECTANGLE',\n  ROUND_2_DIAGONAL_RECTANGLE: 'ROUND_2_DIAGONAL_RECTANGLE',\n  ROUND_2_SAME_RECTANGLE: 'ROUND_2_SAME_RECTANGLE',\n  RIGHT_TRIANGLE: 'RIGHT_TRIANGLE',\n  SMILEY_FACE: 'SMILEY_FACE',\n  SNIP_1_RECTANGLE: 'SNIP_1_RECTANGLE',\n  SNIP_2_DIAGONAL_RECTANGLE: 'SNIP_2_DIAGONAL_RECTANGLE',\n  SNIP_2_SAME_RECTANGLE: 'SNIP_2_SAME_RECTANGLE',\n  SNIP_ROUND_RECTANGLE: 'SNIP_ROUND_RECTANGLE',\n  STAR_10: 'STAR_10',\n  STAR_12: 'STAR_12',\n  STAR_16: 'STAR_16',\n  STAR_24: 'STAR_24',\n  STAR_32: 'STAR_32',\n  STAR_4: 'STAR_4',\n  STAR_5: 'STAR_5',\n  STAR_6: 'STAR_6',\n  STAR_7: 'STAR_7',\n  STAR_8: 'STAR_8',\n  STRIPED_RIGHT_ARROW: 'STRIPED_RIGHT_ARROW',\n  SUN: 'SUN',\n  TRAPEZOID: 'TRAPEZOID',\n  TRIANGLE: 'TRIANGLE',\n  UP_ARROW: 'UP_ARROW',\n  UP_ARROW_CALLOUT: 'UP_ARROW_CALLOUT',\n  UP_DOWN_ARROW: 'UP_DOWN_ARROW',\n  UTURN_ARROW: 'UTURN_ARROW',\n  VERTICAL_SCROLL: 'VERTICAL_SCROLL',\n  WAVE: 'WAVE',\n  WEDGE_ELLIPSE_CALLOUT: 'WEDGE_ELLIPSE_CALLOUT',\n  WEDGE_RECTANGLE_CALLOUT: 'WEDGE_RECTANGLE_CALLOUT',\n  WEDGE_ROUND_RECTANGLE_CALLOUT: 'WEDGE_ROUND_RECTANGLE_CALLOUT',\n  FLOW_CHART_ALTERNATE_PROCESS: 'FLOW_CHART_ALTERNATE_PROCESS',\n  FLOW_CHART_COLLATE: 'FLOW_CHART_COLLATE',\n  FLOW_CHART_CONNECTOR: 'FLOW_CHART_CONNECTOR',\n  FLOW_CHART_DECISION: 'FLOW_CHART_DECISION',\n  FLOW_CHART_DELAY: 'FLOW_CHART_DELAY',\n  FLOW_CHART_DISPLAY: 'FLOW_CHART_DISPLAY',\n  FLOW_CHART_DOCUMENT: 'FLOW_CHART_DOCUMENT',\n  FLOW_CHART_EXTRACT: 'FLOW_CHART_EXTRACT',\n  FLOW_CHART_INPUT_OUTPUT: 'FLOW_CHART_INPUT_OUTPUT',\n  FLOW_CHART_INTERNAL_STORAGE: 'FLOW_CHART_INTERNAL_STORAGE',\n  FLOW_CHART_MAGNETIC_DISK: 'FLOW_CHART_MAGNETIC_DISK',\n  FLOW_CHART_MAGNETIC_DRUM: 'FLOW_CHART_MAGNETIC_DRUM',\n  FLOW_CHART_MAGNETIC_TAPE: 'FLOW_CHART_MAGNETIC_TAPE',\n  FLOW_CHART_MANUAL_INPUT: 'FLOW_CHART_MANUAL_INPUT',\n  FLOW_CHART_MANUAL_OPERATION: 'FLOW_CHART_MANUAL_OPERATION',\n  FLOW_CHART_MERGE: 'FLOW_CHART_MERGE',\n  FLOW_CHART_MULTIDOCUMENT: 'FLOW_CHART_MULTIDOCUMENT',\n  FLOW_CHART_OFFLINE_STORAGE: 'FLOW_CHART_OFFLINE_STORAGE',\n  FLOW_CHART_OFFPAGE_CONNECTOR: 'FLOW_CHART_OFFPAGE_CONNECTOR',\n  FLOW_CHART_ONLINE_STORAGE: 'FLOW_CHART_ONLINE_STORAGE',\n  FLOW_CHART_OR: 'FLOW_CHART_OR',\n  FLOW_CHART_PREDEFINED_PROCESS: 'FLOW_CHART_PREDEFINED_PROCESS',\n  FLOW_CHART_PREPARATION: 'FLOW_CHART_PREPARATION',\n  FLOW_CHART_PROCESS: 'FLOW_CHART_PROCESS',\n  FLOW_CHART_PUNCHED_CARD: 'FLOW_CHART_PUNCHED_CARD',\n  FLOW_CHART_PUNCHED_TAPE: 'FLOW_CHART_PUNCHED_TAPE',\n  FLOW_CHART_SORT: 'FLOW_CHART_SORT',\n  FLOW_CHART_SUMMING_JUNCTION: 'FLOW_CHART_SUMMING_JUNCTION',\n  FLOW_CHART_TERMINATOR: 'FLOW_CHART_TERMINATOR',\n  ARROW_EAST: 'ARROW_EAST',\n  ARROW_NORTH_EAST: 'ARROW_NORTH_EAST',\n  ARROW_NORTH: 'ARROW_NORTH',\n  SPEECH: 'SPEECH',\n  STARBURST: 'STARBURST',\n  TEARDROP: 'TEARDROP',\n  ELLIPSE_RIBBON: 'ELLIPSE_RIBBON',\n  ELLIPSE_RIBBON_2: 'ELLIPSE_RIBBON_2',\n  CLOUD_CALLOUT: 'CLOUD_CALLOUT',\n  CUSTOM: 'CUSTOM'\n};\n\nconst TEXT_ALIGNMENT = {\n  LEFT: 'START',\n  CENTER: 'CENTER',\n  RIGHT: 'END',\n  JUSTIFIED: 'JUSTIFIED'\n};\n\nconst PARAGRAPH_ALIGNMENT = {\n  START: 'START',\n  CENTER: 'CENTER',\n  END: 'END',\n  JUSTIFIED: 'JUSTIFIED'\n};\n\nconst FONT_FAMILIES = {\n  ARIAL: 'Arial',\n  CALIBRI: 'Calibri',\n  CAMBRIA: 'Cambria',\n  COMIC_SANS_MS: 'Comic Sans MS',\n  COURIER_NEW: 'Courier New',\n  GEORGIA: 'Georgia',\n  HELVETICA: 'Helvetica',\n  IMPACT: 'Impact',\n  LUCIDA_SANS_UNICODE: 'Lucida Sans Unicode',\n  TAHOMA: 'Tahoma',\n  TIMES_NEW_ROMAN: 'Times New Roman',\n  TREBUCHET_MS: 'Trebuchet MS',\n  VERDANA: 'Verdana'\n};\n\nconst COLOR_THEMES = {\n  DARK1: 'DARK1',\n  LIGHT1: 'LIGHT1',\n  DARK2: 'DARK2',\n  LIGHT2: 'LIGHT2',\n  ACCENT1: 'ACCENT1',\n  ACCENT2: 'ACCENT2',\n  ACCENT3: 'ACCENT3',\n  ACCENT4: 'ACCENT4',\n  ACCENT5: 'ACCENT5',\n  ACCENT6: 'ACCENT6',\n  HYPERLINK: 'HYPERLINK',\n  FOLLOWED_HYPERLINK: 'FOLLOWED_HYPERLINK'\n};\n\nconst ERROR_TYPES = {\n  API_ERROR: 'API_ERROR',\n  PERMISSION_ERROR: 'PERMISSION_ERROR',\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  CONFIGURATION_ERROR: 'CONFIGURATION_ERROR',\n  PROCESSING_ERROR: 'PROCESSING_ERROR',\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR'\n};\n\nconst PERFORMANCE_THRESHOLDS = {\n  SLOW_OPERATION_MS: 30000,\n  BATCH_SIZE_WARNING: 75,\n  MAX_RETRIES_WARNING: 5,\n  MAX_ELEMENTS_WARNING: 1000\n};\n\nconst DEFAULT_CONFIG = {\n  fontMappings: {\n    'Comic Sans MS': 'Arial',\n    'Arial': 'Comic Sans MS'\n  },\n  processNotes: true,\n  skipErrors: true,\n  batchSize: 50,\n  apiRetries: 3,\n  apiRetryDelay: 1000\n};\n\nconst TEST_PRESENTATION_ID = '1_WxqIvBQ2ArGjUqamVhVYKdAie5YrEgXmmUFMgNNpPA';\n\nconst STATUS_MESSAGES = {\n  STARTING: 'Starting presentation analysis...',\n  ANALYZING: 'Analyzing presentation structure...',\n  PROCESSING_FONTS: 'Processing font changes...',\n  PROCESSING_BATCH: 'Processing batch {current}/{total}...',\n  FINALIZING: 'Finalizing changes...',\n  COMPLETED: 'Processing completed successfully!',\n  HALTED: 'Processing halted by user request',\n  ERROR: 'An error occurred during processing'\n};\n\nconst UI_SETTINGS = {\n  DIALOG_WIDTH: 700,\n  DIALOG_HEIGHT: 600,\n  PROGRESS_DIALOG_WIDTH: 400,\n  PROGRESS_DIALOG_HEIGHT: 300,\n  MESSAGE_TIMEOUT_MS: 5000\n};"
    },
    {
      "name": "formatter",
      "type": "server_js",
      "source": "class SlideFormatter {\n  constructor(config) {\n    this.config = config;\n    this.apiClient = new SlidesApiClient(config);\n    this.results = {\n      totalElements: 0,\n      processedElements: 0,\n      errors: [],\n      fontChanges: []\n    };\n  }\n  \n  formatPresentation(presentationId) {\n    Logger.log(`Starting presentation formatting for ID: ${presentationId}`);\n    \n    try {\n      const pageElements = this.apiClient.getAllPageElements(presentationId);\n      Logger.log(`Found ${pageElements.length} page elements to process`);\n      \n      this.results.totalElements = pageElements.length;\n      \n      const textElements = this.apiClient.getTextElements(pageElements);\n      const tableElements = this.apiClient.getTableElements(pageElements);\n      \n      Logger.log(`Found ${textElements.length} text elements and ${tableElements.length} table elements`);\n      \n      this.processTextElements(presentationId, textElements);\n      this.processTableElements(presentationId, tableElements);\n      \n      Logger.log('Presentation formatting completed');\n      Logger.log(`Results: ${this.results.processedElements}/${this.results.totalElements} elements processed`);\n      Logger.log(`Font changes made: ${this.results.fontChanges.length}`);\n      Logger.log(`Errors encountered: ${this.results.errors.length}`);\n      \n      return this.results;\n    } catch (error) {\n      Logger.log(`Error formatting presentation: ${error.toString()}`);\n      this.results.errors.push({\n        elementId: 'presentation',\n        error: error.toString(),\n        location: 'Presentation level'\n      });\n      throw error;\n    }\n  }\n  \n  processTextElements(presentationId, textElements) {\n    Logger.log(`Processing ${textElements.length} text elements`);\n    \n    const batches = this.createBatches(textElements, this.config.batchSize);\n    \n    for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {\n      const batch = batches[batchIndex];\n      Logger.log(`Processing batch ${batchIndex + 1}/${batches.length} with ${batch.length} elements`);\n      \n      try {\n        this.processBatch(presentationId, batch);\n      } catch (error) {\n        if (this.config.skipErrors) {\n          Logger.log(`Batch ${batchIndex + 1} failed, skipping: ${error.toString()}`);\n          this.results.errors.push({\n            batch: batchIndex + 1,\n            error: error.toString(),\n            location: 'Batch processing'\n          });\n        } else {\n          throw error;\n        }\n      }\n    }\n  }\n  \n  processTableElements(presentationId, tableElements) {\n    Logger.log(`Processing ${tableElements.length} table elements`);\n    \n    for (const elementInfo of tableElements) {\n      try {\n        this.processTableElement(presentationId, elementInfo);\n      } catch (error) {\n        if (this.config.skipErrors) {\n          Logger.log(`Table element ${elementInfo.elementId} failed, skipping: ${error.toString()}`);\n          this.results.errors.push({\n            elementId: elementInfo.elementId,\n            slideId: elementInfo.slideId,\n            error: error.toString(),\n            location: `Slide ${elementInfo.slideIndex + 1}`\n          });\n        } else {\n          throw error;\n        }\n      }\n    }\n  }\n  \n  processBatch(presentationId, batch) {\n    const requests = [];\n    \n    for (const elementInfo of batch) {\n      try {\n        const elementRequests = this.generateTextStyleRequests(elementInfo);\n        requests.push(...elementRequests);\n        this.results.processedElements++;\n      } catch (error) {\n        if (this.config.skipErrors) {\n          Logger.log(`Element ${elementInfo.elementId} failed, skipping: ${error.toString()}`);\n          this.results.errors.push({\n            elementId: elementInfo.elementId,\n            slideId: elementInfo.slideId,\n            error: error.toString(),\n            location: `Slide ${elementInfo.slideIndex + 1}`\n          });\n        } else {\n          throw error;\n        }\n      }\n    }\n    \n    if (requests.length > 0) {\n      this.apiClient.batchUpdate(presentationId, requests);\n    }\n  }\n  \n  processTableElement(presentationId, elementInfo) {\n    const table = elementInfo.element.table;\n    const requests = [];\n    \n    for (let rowIndex = 0; rowIndex < table.tableRows.length; rowIndex++) {\n      const row = table.tableRows[rowIndex];\n      \n      for (let colIndex = 0; colIndex < row.tableCells.length; colIndex++) {\n        const cell = row.tableCells[colIndex];\n        \n        if (cell.text && cell.text.textElements) {\n          const cellRequests = this.generateTableCellTextStyleRequests(\n            elementInfo.elementId,\n            rowIndex,\n            colIndex,\n            cell.text.textElements\n          );\n          requests.push(...cellRequests);\n        }\n      }\n    }\n    \n    if (requests.length > 0) {\n      this.apiClient.batchUpdate(presentationId, requests);\n    }\n    \n    this.results.processedElements++;\n  }\n  \n  generateTextStyleRequests(elementInfo) {\n    const requests = [];\n    const shape = elementInfo.element.shape;\n    \n    if (!shape.text || !shape.text.textElements) {\n      return requests;\n    }\n    \n    const textElements = shape.text.textElements;\n    \n    for (const textElement of textElements) {\n      if (textElement.textRun && textElement.textRun.style) {\n        const style = textElement.textRun.style;\n        \n        if (style.fontFamily) {\n          const currentFont = style.fontFamily;\n          const newFont = this.config.fontMappings[currentFont];\n          \n          if (newFont && newFont !== currentFont) {\n            const request = {\n              updateTextStyle: {\n                objectId: elementInfo.elementId,\n                fields: 'fontFamily',\n                style: {\n                  fontFamily: newFont\n                },\n                textRange: {\n                  type: 'ALL'\n                }\n              }\n            };\n            \n            requests.push(request);\n            \n            this.results.fontChanges.push({\n              elementId: elementInfo.elementId,\n              slideId: elementInfo.slideId,\n              slideIndex: elementInfo.slideIndex,\n              fromFont: currentFont,\n              toFont: newFont,\n              isNotesPage: elementInfo.isNotesPage || false\n            });\n            \n            Logger.log(`Font change: ${currentFont} → ${newFont} in element ${elementInfo.elementId}`);\n          }\n        }\n      }\n    }\n    \n    return requests;\n  }\n  \n  generateTableCellTextStyleRequests(tableId, rowIndex, colIndex, textElements) {\n    const requests = [];\n    \n    for (const textElement of textElements) {\n      if (textElement.textRun && textElement.textRun.style) {\n        const style = textElement.textRun.style;\n        \n        if (style.fontFamily) {\n          const currentFont = style.fontFamily;\n          const newFont = this.config.fontMappings[currentFont];\n          \n          if (newFont && newFont !== currentFont) {\n            const request = {\n              updateTextStyle: {\n                objectId: tableId,\n                fields: 'fontFamily',\n                style: {\n                  fontFamily: newFont\n                },\n                textRange: {\n                  type: 'ALL'\n                },\n                cellLocation: {\n                  rowIndex: rowIndex,\n                  columnIndex: colIndex\n                }\n              }\n            };\n            \n            requests.push(request);\n            \n            this.results.fontChanges.push({\n              elementId: tableId,\n              cellLocation: `Row ${rowIndex + 1}, Col ${colIndex + 1}`,\n              fromFont: currentFont,\n              toFont: newFont\n            });\n            \n            Logger.log(`Table font change: ${currentFont} → ${newFont} in table ${tableId} cell [${rowIndex},${colIndex}]`);\n          }\n        }\n      }\n    }\n    \n    return requests;\n  }\n  \n  createBatches(items, batchSize) {\n    const batches = [];\n    \n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n    \n    return batches;\n  }\n  \n  generateErrorReport() {\n    if (this.results.errors.length === 0) {\n      return 'No errors encountered during processing.';\n    }\n    \n    let report = `Error Report (${this.results.errors.length} errors):\\n\\n`;\n    \n    for (let i = 0; i < this.results.errors.length; i++) {\n      const error = this.results.errors[i];\n      report += `${i + 1}. ${error.location}\\n`;\n      report += `   Element: ${error.elementId || 'N/A'}\\n`;\n      if (error.slideId) {\n        report += `   Slide: ${error.slideId}\\n`;\n      }\n      report += `   Error: ${error.error}\\n\\n`;\n    }\n    \n    return report;\n  }\n  \n  generateSuccessReport() {\n    let report = `Formatting Results:\\n\\n`;\n    report += `Total Elements: ${this.results.totalElements}\\n`;\n    report += `Processed Elements: ${this.results.processedElements}\\n`;\n    report += `Font Changes: ${this.results.fontChanges.length}\\n`;\n    report += `Errors: ${this.results.errors.length}\\n\\n`;\n    \n    if (this.results.fontChanges.length > 0) {\n      report += `Font Changes Made:\\n`;\n      for (const change of this.results.fontChanges) {\n        report += `- ${change.fromFont} → ${change.toFont}`;\n        if (change.cellLocation) {\n          report += ` (${change.cellLocation})`;\n        }\n        if (change.isNotesPage) {\n          report += ` [Notes Page]`;\n        }\n        report += `\\n`;\n      }\n    }\n    \n    return report;\n  }\n}"
    },
    {
      "name": "main",
      "type": "server_js",
      "source": "function onOpen() {\n  createMenu();\n}\n\nfunction createMenu() {\n  const ui = SpreadsheetApp.getUi();\n  ui.createMenu('Slide Formatter')\n    .addItem('Format Presentation', 'formatPresentation')\n    .addItem('Settings', 'showSettings')\n    .addToUi();\n}\n\nfunction formatPresentation() {\n  try {\n    const ui = SpreadsheetApp.getUi();\n    const response = ui.prompt(\n      'Format Presentation',\n      'Enter the Google Slides presentation URL:',\n      ui.ButtonSet.OK_CANCEL\n    );\n    \n    if (response.getSelectedButton() === ui.Button.OK) {\n      const presentationUrl = response.getResponseText().trim();\n      \n      if (!presentationUrl) {\n        ui.alert('Error', 'Please enter a valid presentation URL.', ui.ButtonSet.OK);\n        return;\n      }\n      \n      const presentationId = extractPresentationId(presentationUrl);\n      if (!presentationId) {\n        ui.alert('Error', 'Invalid presentation URL format.', ui.ButtonSet.OK);\n        return;\n      }\n      \n      showProgressDialog();\n      \n      processPresentation(presentationId);\n      \n      ui.alert('Success', 'Presentation formatting completed!', ui.ButtonSet.OK);\n    }\n  } catch (error) {\n    Logger.log('Error in formatPresentation: ' + error.toString());\n    SpreadsheetApp.getUi().alert('Error', 'An error occurred: ' + error.message, SpreadsheetApp.getUi().ButtonSet.OK);\n  }\n}\n\nfunction processPresentation(presentationId) {\n  const config = getDefaultConfig();\n  const formatter = new SlideFormatter(config);\n  return formatter.formatPresentation(presentationId);\n}\n\nfunction extractPresentationId(url) {\n  const regex = /\\/presentation\\/d\\/([a-zA-Z0-9-_]+)/;\n  const match = url.match(regex);\n  return match ? match[1] : null;\n}\n\nfunction testFontSwap() {\n  const testPresentationId = '1_WxqIvBQ2ArGjUqamVhVYKdAie5YrEgXmmUFMgNNpPA';\n  \n  try {\n    Logger.log('Starting font swap test...');\n    const result = processPresentation(testPresentationId);\n    Logger.log('Font swap test completed successfully');\n    Logger.log('Results: ' + JSON.stringify(result, null, 2));\n    return result;\n  } catch (error) {\n    Logger.log('Font swap test failed: ' + error.toString());\n    throw error;\n  }\n}"
    },
    {
      "name": "slides-api",
      "type": "server_js",
      "source": "class SlidesApiClient {\n  constructor(config) {\n    this.config = config;\n    this.retryCount = config.apiRetries || 3;\n    this.retryDelay = config.apiRetryDelay || 1000;\n  }\n  \n  getPresentation(presentationId) {\n    return this.withRetry(() => {\n      return Slides.Presentations.get(presentationId);\n    });\n  }\n  \n  getSlide(presentationId, slideId) {\n    return this.withRetry(() => {\n      return Slides.Presentations.Pages.get(presentationId, slideId);\n    });\n  }\n  \n  batchUpdate(presentationId, requests) {\n    if (!requests || requests.length === 0) {\n      return { replies: [] };\n    }\n    \n    return this.withRetry(() => {\n      const requestBody = {\n        requests: requests\n      };\n      \n      Logger.log(`Executing batch update with ${requests.length} requests`);\n      const response = Slides.Presentations.batchUpdate(requestBody, presentationId);\n      Logger.log(`Batch update completed successfully`);\n      return response;\n    });\n  }\n  \n  withRetry(apiCall) {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= this.retryCount; attempt++) {\n      try {\n        return apiCall();\n      } catch (error) {\n        lastError = error;\n        Logger.log(`API call failed (attempt ${attempt}/${this.retryCount}): ${error.toString()}`);\n        \n        if (attempt < this.retryCount) {\n          if (this.isRetryableError(error)) {\n            Logger.log(`Retrying in ${this.retryDelay}ms...`);\n            Utilities.sleep(this.retryDelay);\n          } else {\n            Logger.log('Non-retryable error, throwing immediately');\n            throw error;\n          }\n        }\n      }\n    }\n    \n    throw new Error(`API call failed after ${this.retryCount} attempts. Last error: ${lastError.toString()}`);\n  }\n  \n  isRetryableError(error) {\n    const errorString = error.toString().toLowerCase();\n    \n    const retryableErrors = [\n      'service invoked too many times',\n      'rate limit exceeded',\n      'quota exceeded',\n      'internal error',\n      'backend error',\n      'temporarily unavailable',\n      'timeout'\n    ];\n    \n    return retryableErrors.some(retryableError => errorString.includes(retryableError));\n  }\n  \n  getAllSlides(presentationId) {\n    const presentation = this.getPresentation(presentationId);\n    const slides = [];\n    \n    if (presentation.slides) {\n      for (const slide of presentation.slides) {\n        slides.push({\n          slideId: slide.objectId,\n          slideIndex: slides.length,\n          slide: slide\n        });\n      }\n    }\n    \n    return slides;\n  }\n  \n  getAllPageElements(presentationId) {\n    const slides = this.getAllSlides(presentationId);\n    const allElements = [];\n    \n    for (const slideInfo of slides) {\n      const slide = slideInfo.slide;\n      \n      if (slide.pageElements) {\n        for (const element of slide.pageElements) {\n          allElements.push({\n            slideId: slideInfo.slideId,\n            slideIndex: slideInfo.slideIndex,\n            elementId: element.objectId,\n            element: element,\n            elementType: this.getElementType(element)\n          });\n        }\n      }\n      \n      if (this.config.processNotes && slide.slideProperties && slide.slideProperties.notesPage) {\n        const notesPage = slide.slideProperties.notesPage;\n        if (notesPage.pageElements) {\n          for (const element of notesPage.pageElements) {\n            allElements.push({\n              slideId: slideInfo.slideId,\n              slideIndex: slideInfo.slideIndex,\n              elementId: element.objectId,\n              element: element,\n              elementType: this.getElementType(element),\n              isNotesPage: true\n            });\n          }\n        }\n      }\n    }\n    \n    return allElements;\n  }\n  \n  getElementType(element) {\n    if (element.shape) return 'shape';\n    if (element.table) return 'table';\n    if (element.image) return 'image';\n    if (element.video) return 'video';\n    if (element.line) return 'line';\n    if (element.wordArt) return 'wordArt';\n    if (element.sheetsChart) return 'sheetsChart';\n    return 'unknown';\n  }\n  \n  getTextElements(pageElements) {\n    return pageElements.filter(elementInfo => {\n      const element = elementInfo.element;\n      return element.shape && element.shape.text && element.shape.text.textElements;\n    });\n  }\n  \n  getTableElements(pageElements) {\n    return pageElements.filter(elementInfo => {\n      const element = elementInfo.element;\n      return element.table && element.table.tableRows;\n    });\n  }\n}"
    },
    {
      "name": "ui",
      "type": "server_js",
      "source": "function showSettings() {\n  const htmlTemplate = HtmlService.createTemplate(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <base target=\"_top\">\n        <style>\n          body { font-family: Arial, sans-serif; margin: 20px; }\n          .container { max-width: 600px; }\n          .form-group { margin-bottom: 15px; }\n          label { display: block; margin-bottom: 5px; font-weight: bold; }\n          input, textarea, select { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; }\n          textarea { height: 200px; font-family: monospace; }\n          button { background-color: #4285f4; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px; }\n          button:hover { background-color: #3367d6; }\n          .secondary { background-color: #6c757d; }\n          .secondary:hover { background-color: #545b62; }\n          .error { color: #d32f2f; margin-top: 10px; }\n          .success { color: #388e3c; margin-top: 10px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <h2>Slide Formatter Settings</h2>\n          \n          <form id=\"settingsForm\">\n            <div class=\"form-group\">\n              <label for=\"yamlConfig\">Configuration (YAML):</label>\n              <textarea id=\"yamlConfig\" placeholder=\"Enter YAML configuration...\"><?= yamlConfig ?></textarea>\n            </div>\n            \n            <div class=\"form-group\">\n              <button type=\"button\" onclick=\"loadDefaults()\">Load Defaults</button>\n              <button type=\"button\" onclick=\"saveConfig()\" class=\"primary\">Save Configuration</button>\n              <button type=\"button\" onclick=\"validateConfig()\" class=\"secondary\">Validate</button>\n            </div>\n            \n            <div id=\"message\"></div>\n          </form>\n          \n          <hr style=\"margin: 30px 0;\">\n          \n          <h3>Quick Actions</h3>\n          <div class=\"form-group\">\n            <button type=\"button\" onclick=\"testConfiguration()\">Test Configuration</button>\n            <button type=\"button\" onclick=\"runFontSwapTest()\">Run Font Swap Test</button>\n          </div>\n          \n          <div id=\"testResults\"></div>\n        </div>\n        \n        <script>\n          function loadDefaults() {\n            const defaultConfig = \\`fontMappings:\n  - \"Comic Sans MS\": \"Arial\"\n  - \"Arial\": \"Comic Sans MS\"\n\nprocessNotes: true\nskipErrors: true\nbatchSize: 50\napiRetries: 3\napiRetryDelay: 1000\\`;\n            \n            document.getElementById('yamlConfig').value = defaultConfig;\n            showMessage('Default configuration loaded.', 'success');\n          }\n          \n          function saveConfig() {\n            const yamlConfig = document.getElementById('yamlConfig').value;\n            \n            google.script.run\n              .withSuccessHandler(onSaveSuccess)\n              .withFailureHandler(onSaveFailure)\n              .saveConfigFromUI(yamlConfig);\n          }\n          \n          function validateConfig() {\n            const yamlConfig = document.getElementById('yamlConfig').value;\n            \n            google.script.run\n              .withSuccessHandler(onValidateSuccess)\n              .withFailureHandler(onValidateFailure)\n              .validateConfigFromUI(yamlConfig);\n          }\n          \n          function testConfiguration() {\n            showMessage('Testing configuration...', 'info');\n            \n            google.script.run\n              .withSuccessHandler(onTestSuccess)\n              .withFailureHandler(onTestFailure)\n              .testConfigurationFromUI();\n          }\n          \n          function runFontSwapTest() {\n            showMessage('Running font swap test...', 'info');\n            \n            google.script.run\n              .withSuccessHandler(onFontSwapTestSuccess)\n              .withFailureHandler(onFontSwapTestFailure)\n              .testFontSwap();\n          }\n          \n          function onSaveSuccess(result) {\n            showMessage('Configuration saved successfully!', 'success');\n          }\n          \n          function onSaveFailure(error) {\n            showMessage('Error saving configuration: ' + error.message, 'error');\n          }\n          \n          function onValidateSuccess(result) {\n            showMessage('Configuration is valid!', 'success');\n          }\n          \n          function onValidateFailure(error) {\n            showMessage('Configuration validation failed: ' + error.message, 'error');\n          }\n          \n          function onTestSuccess(result) {\n            showMessage('Configuration test passed!', 'success');\n          }\n          \n          function onTestFailure(error) {\n            showMessage('Configuration test failed: ' + error.message, 'error');\n          }\n          \n          function onFontSwapTestSuccess(result) {\n            showMessage('Font swap test completed successfully!', 'success');\n            document.getElementById('testResults').innerHTML = \n              '<h4>Test Results:</h4><pre>' + JSON.stringify(result, null, 2) + '</pre>';\n          }\n          \n          function onFontSwapTestFailure(error) {\n            showMessage('Font swap test failed: ' + error.message, 'error');\n          }\n          \n          function showMessage(message, type) {\n            const messageDiv = document.getElementById('message');\n            messageDiv.innerHTML = '<div class=\"' + type + '\">' + message + '</div>';\n            \n            setTimeout(() => {\n              if (type !== 'error') {\n                messageDiv.innerHTML = '';\n              }\n            }, 5000);\n          }\n          \n          // Load current configuration on page load\n          window.onload = function() {\n            google.script.run\n              .withSuccessHandler(function(config) {\n                document.getElementById('yamlConfig').value = config;\n              })\n              .getCurrentConfigYaml();\n          };\n        </script>\n      </body>\n    </html>\n  `);\n  \n  htmlTemplate.yamlConfig = getCurrentConfigYaml();\n  \n  const htmlOutput = htmlTemplate.evaluate()\n    .setWidth(700)\n    .setHeight(600)\n    .setTitle('Slide Formatter Settings');\n  \n  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Settings');\n}\n\nfunction getCurrentConfigYaml() {\n  try {\n    const config = getConfigFromSheet();\n    return configToYaml(config);\n  } catch (error) {\n    Logger.log('Error getting current config: ' + error.toString());\n    return configToYaml(getDefaultConfig());\n  }\n}\n\nfunction saveConfigFromUI(yamlString) {\n  try {\n    const config = parseYamlConfig(yamlString);\n    saveConfigToSheet(config);\n    return { success: true };\n  } catch (error) {\n    throw new Error('Failed to save configuration: ' + error.message);\n  }\n}\n\nfunction validateConfigFromUI(yamlString) {\n  try {\n    const config = parseYamlConfig(yamlString);\n    validateConfig(config);\n    return { valid: true };\n  } catch (error) {\n    throw new Error('Validation failed: ' + error.message);\n  }\n}\n\nfunction testConfigurationFromUI() {\n  try {\n    const config = getConfigFromSheet();\n    validateConfig(config);\n    \n    if (Object.keys(config.fontMappings).length === 0) {\n      throw new Error('No font mappings configured');\n    }\n    \n    return { \n      success: true, \n      message: 'Configuration is valid and ready to use',\n      fontMappings: Object.keys(config.fontMappings).length\n    };\n  } catch (error) {\n    throw new Error('Configuration test failed: ' + error.message);\n  }\n}\n\nfunction showProgressDialog() {\n  const html = `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <base target=\"_top\">\n        <style>\n          body { font-family: Arial, sans-serif; margin: 20px; text-align: center; }\n          .progress-container { margin: 20px 0; }\n          .spinner { \n            border: 4px solid #f3f3f3;\n            border-top: 4px solid #4285f4;\n            border-radius: 50%;\n            width: 40px;\n            height: 40px;\n            animation: spin 1s linear infinite;\n            margin: 20px auto;\n          }\n          @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n          .status { margin: 10px 0; font-size: 16px; }\n          button { \n            background-color: #d32f2f; \n            color: white; \n            padding: 10px 20px; \n            border: none; \n            border-radius: 4px; \n            cursor: pointer;\n            margin-top: 20px;\n          }\n          button:hover { background-color: #b71c1c; }\n        </style>\n      </head>\n      <body>\n        <h3>Processing Presentation</h3>\n        <div class=\"progress-container\">\n          <div class=\"spinner\"></div>\n          <div class=\"status\">Analyzing presentation structure...</div>\n          <div class=\"status\" style=\"font-size: 14px; color: #666;\">\n            This may take a few moments for large presentations\n          </div>\n        </div>\n        <button onclick=\"haltProcessing()\">Halt Processing</button>\n        \n        <script>\n          let processingHalted = false;\n          \n          function haltProcessing() {\n            processingHalted = true;\n            document.querySelector('.status').textContent = 'Halting processing...';\n            document.querySelector('button').disabled = true;\n            \n            google.script.run\n              .withSuccessHandler(() => {\n                google.script.host.close();\n              })\n              .haltProcessing();\n          }\n          \n          function updateStatus(message) {\n            if (!processingHalted) {\n              document.querySelector('.status').textContent = message;\n            }\n          }\n          \n          setTimeout(() => {\n            if (!processingHalted) {\n              updateStatus('Processing font changes...');\n            }\n          }, 3000);\n          \n          setTimeout(() => {\n            if (!processingHalted) {\n              updateStatus('Finalizing changes...');\n            }\n          }, 6000);\n          \n          setTimeout(() => {\n            if (!processingHalted) {\n              google.script.host.close();\n            }\n          }, 10000);\n        </script>\n      </body>\n    </html>\n  `;\n  \n  const htmlOutput = HtmlService.createHtml(html)\n    .setWidth(400)\n    .setHeight(300)\n    .setTitle('Processing...');\n  \n  SpreadsheetApp.getUi().showModelessDialog(htmlOutput, 'Processing Presentation');\n}\n\nfunction haltProcessing() {\n  PropertiesService.getScriptProperties().setProperty('HALT_PROCESSING', 'true');\n  Logger.log('Processing halt requested by user');\n}\n\nfunction isProcessingHalted() {\n  const haltFlag = PropertiesService.getScriptProperties().getProperty('HALT_PROCESSING');\n  return haltFlag === 'true';\n}\n\nfunction clearHaltFlag() {\n  PropertiesService.getScriptProperties().deleteProperty('HALT_PROCESSING');\n}"
    },
    {
      "name": "utils",
      "type": "server_js",
      "source": "function deepCopy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction isValidUrl(url) {\n  try {\n    const urlPattern = /^https?:\\/\\/.+/;\n    return urlPattern.test(url);\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction isValidPresentationUrl(url) {\n  const presentationPattern = /\\/presentation\\/d\\/([a-zA-Z0-9-_]+)/;\n  return presentationPattern.test(url);\n}\n\nfunction formatDuration(milliseconds) {\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  \n  if (minutes > 0) {\n    return `${minutes}m ${remainingSeconds}s`;\n  }\n  return `${remainingSeconds}s`;\n}\n\nfunction formatTimestamp() {\n  return new Date().toISOString();\n}\n\nfunction logWithTimestamp(message) {\n  Logger.log(`[${formatTimestamp()}] ${message}`);\n}\n\nfunction sanitizeString(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  \n  return str\n    .replace(/[<>]/g, '')\n    .trim();\n}\n\nfunction truncateString(str, maxLength) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  \n  if (str.length <= maxLength) {\n    return str;\n  }\n  \n  return str.substring(0, maxLength - 3) + '...';\n}\n\nfunction createDeepLink(presentationId, slideId) {\n  return `https://docs.google.com/presentation/d/${presentationId}/edit#slide=id.${slideId}`;\n}\n\nfunction getErrorContext(error, elementId, slideId) {\n  return {\n    error: error.toString(),\n    elementId: elementId,\n    slideId: slideId,\n    timestamp: formatTimestamp(),\n    deepLink: slideId ? createDeepLink('unknown', slideId) : null\n  };\n}\n\nfunction retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000) {\n  let attempt = 0;\n  \n  function executeAttempt() {\n    try {\n      return fn();\n    } catch (error) {\n      attempt++;\n      \n      if (attempt >= maxRetries) {\n        throw error;\n      }\n      \n      const delay = baseDelay * Math.pow(2, attempt - 1);\n      logWithTimestamp(`Attempt ${attempt} failed, retrying in ${delay}ms: ${error.toString()}`);\n      \n      Utilities.sleep(delay);\n      return executeAttempt();\n    }\n  }\n  \n  return executeAttempt();\n}\n\nfunction batchArray(array, batchSize) {\n  const batches = [];\n  for (let i = 0; i < array.length; i += batchSize) {\n    batches.push(array.slice(i, i + batchSize));\n  }\n  return batches;\n}\n\nfunction measureExecutionTime(fn) {\n  const startTime = Date.now();\n  const result = fn();\n  const endTime = Date.now();\n  const duration = endTime - startTime;\n  \n  return {\n    result: result,\n    duration: duration,\n    formattedDuration: formatDuration(duration)\n  };\n}\n\nfunction validateRequiredProperties(obj, requiredProps) {\n  const missing = [];\n  \n  for (const prop of requiredProps) {\n    if (!(prop in obj) || obj[prop] === null || obj[prop] === undefined) {\n      missing.push(prop);\n    }\n  }\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required properties: ${missing.join(', ')}`);\n  }\n  \n  return true;\n}\n\nfunction safeJsonStringify(obj, space = 2) {\n  try {\n    return JSON.stringify(obj, null, space);\n  } catch (error) {\n    return `[JSON Stringify Error: ${error.message}]`;\n  }\n}\n\nfunction getMemoryUsage() {\n  try {\n    return DriveApp.getStorageUsed();\n  } catch (error) {\n    return 'Unknown';\n  }\n}\n\nfunction performanceLog(operation, duration) {\n  const message = `Performance: ${operation} completed in ${formatDuration(duration)}`;\n  Logger.log(message);\n  \n  if (duration > 30000) {\n    Logger.log(`WARNING: Slow operation detected: ${operation}`);\n  }\n}\n\nfunction createProgressTracker(total) {\n  return {\n    total: total,\n    completed: 0,\n    \n    increment() {\n      this.completed++;\n      return this.getProgress();\n    },\n    \n    getProgress() {\n      return {\n        completed: this.completed,\n        total: this.total,\n        percentage: Math.round((this.completed / this.total) * 100),\n        remaining: this.total - this.completed\n      };\n    },\n    \n    isComplete() {\n      return this.completed >= this.total;\n    }\n  };\n}\n\nfunction logConfigurationSummary(config) {\n  Logger.log('=== Configuration Summary ===');\n  Logger.log(`Font mappings: ${Object.keys(config.fontMappings).length}`);\n  Logger.log(`Process notes: ${config.processNotes}`);\n  Logger.log(`Skip errors: ${config.skipErrors}`);\n  Logger.log(`Batch size: ${config.batchSize}`);\n  Logger.log(`API retries: ${config.apiRetries}`);\n  Logger.log(`API retry delay: ${config.apiRetryDelay}ms`);\n  Logger.log('============================');\n}\n\nfunction generateSessionId() {\n  return Utilities.getUuid().substring(0, 8);\n}"
    },
    {
      "name": "appsscript",
      "type": "json",
      "source": "{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Slides\",\n        \"serviceId\": \"slides\",\n        \"version\": \"v1\"\n      },\n      {\n        \"userSymbol\": \"Drive\",\n        \"serviceId\": \"drive\",\n        \"version\": \"v2\"\n      },\n      {\n        \"userSymbol\": \"Sheets\",\n        \"serviceId\": \"sheets\",\n        \"version\": \"v4\"\n      }\n    ]\n  },\n  \"oauthScopes\": [\n    \"https://www.googleapis.com/auth/presentations\",\n    \"https://www.googleapis.com/auth/drive.readonly\",\n    \"https://www.googleapis.com/auth/spreadsheets\"\n  ],\n  \"runtimeVersion\": \"V8\",\n  \"executionApi\": {\n    \"access\": \"MYSELF\"\n  }\n}"
    }
  ]
}