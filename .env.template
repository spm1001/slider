# Environment Variables Template for Google Slides Formatter
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control - it contains secrets!

# =============================================================================
# Google Workspace API Configuration
# =============================================================================

# Google API Key for Custom Search (used by MCP server)
# Get this from: https://console.cloud.google.com/apis/credentials
# Required APIs: Custom Search API
GOOGLE_API_KEY=your_google_api_key_here

# Google Custom Search Engine ID for Google Workspace documentation
# This should be: 701ecba480bf443fa (predefined for Google Workspace docs)
# Or create your own at: https://programmablesearchengine.google.com/
GOOGLE_SEARCH_ENGINE_ID=701ecba480bf443fa

# =============================================================================
# Google Cloud Project Configuration  
# =============================================================================

# Your Google Cloud Project ID (for reference and documentation)
GOOGLE_CLOUD_PROJECT_ID=your-project-id

# Google Cloud Project Number (numeric ID)
GOOGLE_CLOUD_PROJECT_NUMBER=your-project-number

# =============================================================================
# Apps Script Deployment Configuration
# =============================================================================

# Deployment API Key (Apps Script + Drive + Slides + Sheets APIs)
# Get from: https://console.cloud.google.com/apis/credentials
# Required APIs: Apps Script API, Google Drive API, Google Slides API, Google Sheets API
# Separate from GOOGLE_API_KEY (development) for security isolation
DEPLOYMENT_API_KEY=your_deployment_api_key_here

# OAuth 2.0 Client Configuration
# Note: credentials.json file should be placed in project root
# Get from: https://console.cloud.google.com/apis/credentials
# Type: Web Application (not Desktop)
# Authentication Flow: OAuth generates token.json (auto-managed, don't commit)
OAUTH_CLIENT_TYPE=web

# Apps Script Project ID (successfully deployed)
# Current project: https://script.google.com/d/1I2dUX4hBHie4JvxELe5Mog8PxHXRWLUDACYzw94NqMrQr-YGawsNsouu/edit
APPS_SCRIPT_PROJECT_ID=1I2dUX4hBHie4JvxELe5Mog8PxHXRWLUDACYzw94NqMrQr-YGawsNsouu

# =============================================================================
# Development and Testing Configuration
# =============================================================================

# Environment designation (development, staging, production)
NODE_ENV=development

# Enable debug logging for troubleshooting
DEBUG_MODE=false

# Test presentation ID for font swapping validation
TEST_PRESENTATION_ID=1_WxqIvBQ2ArGjUqamVhVYKdAie5YrEgXmmUFMgNNpPA

# =============================================================================
# Security and Compliance
# =============================================================================

# API request timeout in milliseconds
API_TIMEOUT=30000

# Maximum retries for failed API requests
MAX_API_RETRIES=3

# Rate limiting - requests per minute
RATE_LIMIT_RPM=60

# =============================================================================
# Instructions for Setup
# =============================================================================

# 1. Copy this file: cp .env.template .env
# 2. Fill in your actual API keys and project details:
#    - GOOGLE_API_KEY: Development key (Custom Search API only)
#    - DEPLOYMENT_API_KEY: Deployment key (Apps Script + Drive + Slides + Sheets APIs)
# 3. Place credentials.json (OAuth web client) in project root
# 4. Enable Apps Script API at user level: https://script.google.com/home/usersettings
# 5. Never commit .env, credentials.json, or token.json to version control
# 6. Test your configuration: npm run deploy
# 7. Verify MCP server works with development credentials

# CRITICAL DEPLOYMENT REQUIREMENTS:
# - Both API keys must be created with proper scopes
# - Apps Script API must be enabled at Google Cloud project level AND user level
# - OAuth flow generates token.json automatically (valid ~1 year)
# - Deployment script uses: OAuth (credentials.json) + API key (DEPLOYMENT_API_KEY)

# =============================================================================
# File Locations (for reference)
# =============================================================================

# OAuth Credentials: ./credentials.json (user-provided, never commit)
# OAuth Tokens: ./token.json (auto-generated during deployment, never commit)
# Claude Config: ./.claude/ (local settings, never commit) 
# MCP Config: Uses GOOGLE_API_KEY (development) from this file
# Deployment Config: Uses DEPLOYMENT_API_KEY from this file

# TOKEN LIFECYCLE:
# - token.json created during first 'npm run deploy' OR
# - OAuth tokens provided via environment variables (GitHub Secrets)
# - Contains access_token (1 hour) + refresh_token (long-lived)
# - System automatically refreshes expired access tokens  
# - Refresh token valid until: check token.json expiry_date field

# =============================================================================
# OAuth Token Environment Variables (GitHub Secrets Integration)
# =============================================================================

# OAuth Refresh Token (for machine portability via GitHub Secrets)
# Get from: existing token.json or OAuth flow, store in GitHub repository secrets
# Usage: Enables deployment without manual token.json file transfer
# OAUTH_REFRESH_TOKEN=1//your_long_lived_refresh_token_here

# OAuth Access Token (optional - will auto-refresh from refresh token)
# OAUTH_ACCESS_TOKEN=ya29.your_current_access_token_here

# OAuth Token Expiry (optional - will force refresh if not provided)  
# OAUTH_EXPIRY_DATE=1755422833973